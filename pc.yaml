#################################################################
################# PACKAGE CONTROLLO CARICHI #####################
#################################################################
# Autore: andbad                                                #
# GitHub: https://github.com/andbad/HA_PowerControl             #
#################################################################
########################### CREDITS #############################
# Il pacchetto, seppur scritto da 0, ha tratto ispirazione da   #
# https://hassiohelp.eu/2020/10/14/nuovo-controllo-carichi/     #
#################################################################


# Il package seguente, unito allo script python "update_entities.py" mira ad evitare il distacco del contatore a causa
# della troppa potenza assorbita dai vari elettrodomestici (carichi).
# Requisito hardware fondamentale è la presenza di switch sui carichi da controllare e di un sensore che misura la potenza
# dei singoli carichi. 
# Personalmente ho utilizzato dispositivi Shelly 1PM e Shelly Plug S, perfetti per lo scopo.
# E' consigliato, ma non tassativo, l'utilizzo di un sensore che monitori il consumo complessivo dell'impianto (es. Shelly EM).
# La logica prevede che in caso l'utilizzo complessivo superi il valore limite impostato, il pacchetto inizi il distacco
# dei carichi a minore priorità fino a quelli a maggiore priorità, fino a che l'utilizzo complessivo della potenza rientri
# nel limite prefissato. 
# Vi sono due limiti massimi: nel caso in cui si superi il valore massimo "ritardato", il sitema attenderà alcuni minuti
# (regolabili da apposita opzione) prima di procedere con il distacco; nel caso in cui si superi il valore massimo immediato,
# il distacco avviene invece dopo alcuni secondi (anche in questo caso regolati da relativo slider).
# Lo script tiene memoria dell'assorbimento del carico prima del distacco e lo ricollega solo quando la disponibilità
# di potenza è sufficiente a non causare un nuovo distacco.
# La configurazione è interamente tramite interfaccia lovelace, tranne il gruppo di notifica (notify.tutti) che va impostato
# manualmente.

#################################################################
########################## RECORDER #############################
#################################################################
# I seguenti sensori devono essere abilitati nel recorder, al fine di visualizzare lo storico di intervento nel grafico
# dell'interfaccia grafica. Decommentare le seguenti righe potrebbe influire sulla configurazione del recorder in altri file.

# recorder:
#   include:
#     entities:
#       - sensor.potenza_carichi_selezionato
#       - sensor.potenza_carichi_phantom
#       - sensor.potenza_massima_immediato
#       - sensor.potenza_massima_ritardato

#################################################################
########################## SENSORI ##############################
#################################################################
sensor:

# La soluzione più efficace è utilizzare un sensore di potenza a monte dell'impianto, poco prima del contatore.
# In tal caso basta selezionare il sensore appropriato nella configurazione.
# Nell'esempio seguente è utilizzato uno ShellyEM, nel canale 1.
#  - platform: mqtt
#      name: "Potenza carichi"
#      state_topic: "shellies/NOME_SHELLY/emeter/0/power"
#      value_template: "{{ value }}"
#      unit_of_measurement : "Watt"
#      icon: mdi:speedometer

# In alternativa è possibile utilizzare i sensori di potenza dei maggiori carichi utilizzati e mantenere un certo margine 
# di tolleranza.
# Questo comporta di monitorare tutti i maggiori carichi (forno, fornelli, phon, condizionatori, ecc...).
# Naturalmente in questo modo non si può valutare il consumo complessivo, quindi si potrebbe superare il valore limite 
# senza che intervenga il controllo carichi.
# Utilizzando un valore conservativo di potenza massima (ad es. 3kW) e contando sulla tolleranze di 180 minuti fino al 80% 
# (nell'es. 3,6kW) è ugualmente funzionale.
  - platform: template
    sensors:
      potenza_carichi_virtuale:
        unit_of_measurement: 'W'
        value_template: >
          {{ states(states('input_text.carico_1_potenza'))|int +
             states(states('input_text.carico_2_potenza'))|int +
             states(states('input_text.carico_3_potenza'))|int +
             states(states('input_text.carico_4_potenza'))|int +
             states(states('input_text.carico_5_potenza'))|int +
             states(states('input_text.carico_6_potenza'))|int +
             states(states('input_text.carico_7_potenza'))|int +
             states(states('input_text.carico_8_potenza'))|int +
             states(states('input_text.carico_9_potenza'))|int +
             states(states('input_text.carico_10_potenza'))|int }}

# Somma di tutte le potenza "phantom", ovvero i carichi che erano in funzione con un dato assorbimento ma sono stati 
# disattivati.
  - platform: template
    sensors:
      potenza_carichi_phantom:
        unit_of_measurement: 'W'
        value_template: >
          {{ states('input_number.potenza_1_phantom')|int + 
             states('input_number.potenza_2_phantom')|int + 
             states('input_number.potenza_3_phantom')|int + 
             states('input_number.potenza_4_phantom')|int + 
             states('input_number.potenza_5_phantom')|int + 
             states('input_number.potenza_6_phantom')|int + 
             states('input_number.potenza_7_phantom')|int + 
             states('input_number.potenza_8_phantom')|int + 
             states('input_number.potenza_9_phantom')|int + 
             states('input_number.potenza_10_phantom')|int}}

# Mostra lo stato del sensore selezionato, utile per il grafico.
  - platform: template
    sensors:
      potenza_carichi_selezionato:
        unit_of_measurement: 'W'
        value_template: "{{ states(states('input_text.potenza_carichi')) |int }}"

# Valore massimo che i carichi possono impegnare prima di cominciare il distacco
  - platform: template
    sensors:
      potenza_massima_immediato:
        unit_of_measurement: 'W'
        value_template: "{{ states('input_number.potenza_massima_immediato')|int }}"

  - platform: template
    sensors:
      potenza_massima_ritardato:
        unit_of_measurement: 'W'
        value_template: "{{ states('input_number.potenza_massima_ritardato')|int }}"
        
#################################################################
######################### INPUT_* ###############################
#################################################################
input_text:
# In questi campi viene salvato il nome delle entità selezionate dal front-end.
  carico_1_potenza:
  carico_2_potenza:
  carico_3_potenza:
  carico_4_potenza:
  carico_5_potenza:
  carico_6_potenza:
  carico_7_potenza:
  carico_8_potenza:
  carico_9_potenza:
  carico_10_potenza:

  carico_1_switch:
  carico_2_switch:
  carico_3_switch:
  carico_4_switch: 
  carico_5_switch: 
  carico_6_switch: 
  carico_7_switch: 
  carico_8_switch: 
  carico_9_switch: 
  carico_10_switch: 

  potenza_carichi:

input_boolean:
# Switch per l'interfaccia grafica 
  attiva_power_control:
    name: Attiva Power Control 
    icon: mdi:car-cruise-control

  impostazioni_power_control:
    name: Mostra Impostazioni Power Control
    icon: mdi:car-cruise-control

  # Tiene traccia del trigger che ha innescato l'automazione di stop: 
  # se è "0"significa che si è superata la soglia del distacco ritardato
  # se è "1" si è inveve superata la soglia di distacco immediato.
  sensore_trigger:
    name: sensore trigger
    initial: off
    
  sensore_trigger_dumb:
    name: sensore trigger dumb
    initial: off  


input_number:

# Mantengono memoria della potenza utilizzata al momento del distacco, per valutare la riattivazione.
  potenza_1_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_2_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_3_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_4_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_5_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_6_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_7_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_8_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_9_phantom:
    initial: 0
    min: 0
    max: 10000
  potenza_10_phantom:
    initial: 0
    min: 0
    max: 10000
  
  # Slider per la configurazione della potenza massima utilizzabile, superata questa soglia il distacco è immediato
  potenza_massima_immediato:
    min: 0
    max: 9000
    step: 100
  
  # Slider per la configurazione della potenza massima utilizzabile, superata questa soglia vengono attesi alcuni minuti
  # prima del distacco.
  potenza_massima_ritardato:
    min: 0
    max: 9000
    step: 100

  #Attende tot SECONDI tra un distacco e l'altro.
  tempo_stop_immediato:
    min: 0
    max: 60
    step: 1  
  
  #Attende tot MINUTI tra un distacco e l'altro.
  tempo_stop_ritardato:
    min: 0
    max: 180
    step: 10  
  
  #Dopo tot MINUTI che la potenza utilizzata è rientrata nei limiti, inizia a riattivare i carichi
  tempo_start:
    min: 0
    max: 60
    step: 1  
  
  #Attende tot SECONDI tra un distacco e l'altro.
  attesa_stop:
    min: 0
    max: 60
    step: 1  

  #Attende tot MINUTI tra una riattivazione e l'altra per dare il tempo al carico di riprendere il suo normale assorbimento
  attesa_start:
    min: 0
    max: 60
    step: 1  


input_select:
# Drop-down per la configurazione di PC. L'elenco di interruttori e sensori viene aggiornato all'avvio di HA.
  lista_carichi:
    name: Lista potenza carichi
    options:
      - Seleziona
      
# Selezione dele sensore di  potenza utilizzata. Se non configurato, viene utilizzato il sensore virtuale 
  potenza_carichi:
    name: Sensore potenza carichi
    options:
      - Seleziona

# Interruttore carichi
  carico_1_switch:
    name: Interruttore Carico Priorità 1
    options:
      - Seleziona
  carico_2_switch:
    name: Interruttore Carico Priorità 2
    options:
      - Seleziona
  carico_3_switch:
    name: Interruttore Carico Priorità 3
    options:
      - Seleziona
  carico_4_switch:
    name: Interruttore Carico Priorità 4
    options:
      - Seleziona
  carico_5_switch:
    name: Interruttore Carico Priorità 5
    options:
      - Seleziona
  carico_6_switch:
    name: Interruttore Carico Priorità 6
    options:
      - Seleziona
  carico_7_switch:
    name: Interruttore Carico Priorità 7
    options:
      - Seleziona
  carico_8_switch:
    name: Interruttore Carico Priorità 8
    options:
      - Seleziona
  carico_9_switch:
    name: Interruttore Carico Priorità 9
    options:
      - Seleziona
  carico_10_switch:
    name: Interruttore Carico Priorità 10
    options:
      - Seleziona

# Sensori potenza carichi
  carico_1_potenza:
    name: Sensore Carico Priorità 1
    options:
      - Seleziona
  carico_2_potenza:
    name: Sensore Carico Priorità 2
    options:
      - Seleziona
  carico_3_potenza:
    name: Sensore Carico Priorità 3
    options:
      - Seleziona
  carico_4_potenza:
    name: Sensore Carico Priorità 4
    options:
      - Seleziona
  carico_5_potenza:
    name: Sensore Carico Priorità 5
    options:
      - Seleziona
  carico_6_potenza:
    name: Sensore Carico Priorità 6
    options:
      - Seleziona
  carico_7_potenza:
    name: Sensore Carico Priorità 7
    options:
      - Seleziona
  carico_8_potenza:
    name: Sensore Carico Priorità 8
    options:
      - Seleziona
  carico_9_potenza:
    name: Sensore Carico Priorità 9
    options:
      - Seleziona
  carico_10_potenza:
    name: Sensore Carico Priorità 10
    options:
      - Seleziona

#################################################################
####################### AUTOMAZIONI #############################
#################################################################
automation:

# All'avvio di HA, aggiorna gli input_slider con la lista delle entità per i campi di configurazione.
  - id: 'powercontrol_configurazione_popola_entita'
    alias: PowerControl - Configurazione - Popola entità
    trigger:
      - platform: homeassistant
        event: start
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione Configurazione - Popola entità - Avvio script python"
    - service: python_script.update_entities
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione Configurazione - Popola entità - Script python terminato"
    mode: single

# All'avvio di HA attende che l'automazione "Popola entità" termini, poi carica la configurazione di interruttori
# e sensori di potenza.
  - id: 'powercontrol_configurazione_carica'
    alias: PowerControl - Configurazione - Carica
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Carica - Avvio automazione, attendo fine automazione popola_entita_per_configurazione_pc"
      - wait_template: "{{ state_attr('automation.powercontrol_configurazione_popola_entita','current') == 0 }}"
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Carica - Carico input_select dai relativi input_text"
      - service: input_select.select_option
        data:
          entity_id: input_select.potenza_carichi
          option: "{{ states.input_text.potenza_carichi.state }}"

      - service: input_select.select_option
        data:
          entity_id: input_select.carico_1_potenza
          option: "{{ states.input_text.carico_1_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_2_potenza  
          option: "{{ states.input_text.carico_2_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_3_potenza  
          option: "{{ states.input_text.carico_3_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_4_potenza  
          option: "{{ states.input_text.carico_4_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_5_potenza  
          option: "{{ states.input_text.carico_5_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_6_potenza  
          option: "{{ states.input_text.carico_6_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_7_potenza  
          option: "{{ states.input_text.carico_7_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_8_potenza  
          option: "{{ states.input_text.carico_8_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_9_potenza  
          option: "{{ states.input_text.carico_9_potenza.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_10_potenza  
          option: "{{ states.input_text.carico_10_potenza.state }}"

      - service: input_select.select_option
        data:
          entity_id: input_select.carico_1_switch
          option: "{{ states.input_text.carico_1_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_2_switch  
          option: "{{ states.input_text.carico_2_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_3_switch  
          option: "{{ states.input_text.carico_3_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_4_switch  
          option: "{{ states.input_text.carico_4_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_5_switch  
          option: "{{ states.input_text.carico_5_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_6_switch  
          option: "{{ states.input_text.carico_6_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_7_switch  
          option: "{{ states.input_text.carico_7_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_8_switch  
          option: "{{ states.input_text.carico_8_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_9_switch  
          option: "{{ states.input_text.carico_9_switch.state }}"
      - service: input_select.select_option
        data:
          entity_id: input_select.carico_10_switch  
          option: "{{ states.input_text.carico_10_switch.state }}"
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Carica - Fine caricamento"

# Quando viene modificato un parametro nella configurazione di PC tramite gli input_select, 
# attende che l'automazione "Carica" termini, poi carica il valore nell'input_text relativo.
  - id: 'powercontrol_configurazione_salva'
    alias: PowerControl - Configurazione - Salva
    trigger:
      platform: state
      entity_id: 
        - input_select.potenza_carichi
        - input_select.carico_1_potenza
        - input_select.carico_2_potenza
        - input_select.carico_3_potenza
        - input_select.carico_4_potenza
        - input_select.carico_5_potenza
        - input_select.carico_6_potenza
        - input_select.carico_7_potenza
        - input_select.carico_8_potenza
        - input_select.carico_9_potenza
        - input_select.carico_10_potenza
        - input_select.carico_1_switch
        - input_select.carico_2_switch
        - input_select.carico_3_switch
        - input_select.carico_4_switch
        - input_select.carico_5_switch
        - input_select.carico_6_switch
        - input_select.carico_7_switch
        - input_select.carico_8_switch
        - input_select.carico_9_switch
        - input_select.carico_10_switch
      
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Salva - Avvio automazione, attendo fine automazione powercontrol_configurazione_carica"
      - wait_template: "{{ state_attr('automation.powercontrol_configurazione_carica','current') == 0 }}"
      - service: system_log.write
      
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Salva - Salvo input_select in input_text"
      - service: input_text.set_value
        data:
          entity_id: input_text.potenza_carichi
          value: "{{ states.input_select.potenza_carichi.state }}"

      - service: input_text.set_value
        data:
          entity_id: input_text.carico_1_potenza
          value: "{{ states.input_select.carico_1_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_2_potenza
          value: "{{ states.input_select.carico_2_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_3_potenza
          value: "{{ states.input_select.carico_3_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_4_potenza
          value: "{{ states.input_select.carico_4_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_5_potenza
          value: "{{ states.input_select.carico_5_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_6_potenza
          value: "{{ states.input_select.carico_6_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_7_potenza
          value: "{{ states.input_select.carico_7_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_8_potenza
          value: "{{ states.input_select.carico_8_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_9_potenza
          value: "{{ states.input_select.carico_9_potenza.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_10_potenza
          value: "{{ states.input_select.carico_10_potenza.state }}"

      - service: input_text.set_value
        data:
          entity_id: input_text.carico_1_switch
          value: "{{ states.input_select.carico_1_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_2_switch
          value: "{{ states.input_select.carico_2_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_3_switch
          value: "{{ states.input_select.carico_3_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_4_switch
          value: "{{ states.input_select.carico_4_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_5_switch
          value: "{{ states.input_select.carico_5_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_6_switch
          value: "{{ states.input_select.carico_6_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_7_switch
          value: "{{ states.input_select.carico_7_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_8_switch
          value: "{{ states.input_select.carico_8_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_9_switch
          value: "{{ states.input_select.carico_9_switch.state }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.carico_10_switch
          value: "{{ states.input_select.carico_10_switch.state }}"
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: "Automazione Configurazione - Salva - Fine salvataggio"


# Automazione che si triggera nel momento in cui la la potenza utilizzata supera la potenza massima impostata.
# Agisce dopo TOT secondi dal superamento del limite, avvia lo script di distacco ed invia notifica di intervento.
# Ripete l'avvio dello script di distacco finché la potenza impegnata non rientra nel limite.
  - id: 'powercontrol_carichi_stop'
    alias: PowerControl - Carichi Stop
    description: ''
    trigger:
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi')) |int > states.sensor.potenza_massima_immediato.state|int }}"
      for: 
        seconds: "{{ states.input_number.tempo_stop_immediato.state|int }}"
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi')) |int > states.sensor.potenza_massima_ritardato.state|int }}" 
      for: 
        minutes: "{{ states.input_number.tempo_stop_ritardato.state|int }}"
    condition:
    - condition: state
      entity_id: input_boolean.attiva_power_control
      state: 'on'
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione Carichi Stop triggerata: Potenza carichi ({{ states(states('input_text.potenza_carichi'))|int }}))"
    - service: input_boolean.turn_on
      target: 
        entity_id: >
            {% if states(states('input_text.potenza_carichi')) |int > states.sensor.potenza_massima_immediato.state|int %}
              input_boolean.sensore_trigger
            {% else %}
              input_boolean.sensore_trigger_dumb
            {% endif %}
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Tipo di innesco ({{ states.input_boolean.sensore_trigger.state }}))"
        
    - repeat:
        sequence:
          - service: system_log.write
            data_template:
              level: debug
              logger: homeassistant.components.pc
              message: "Avviato script stop carichi: potenza carichi {{ states(states('input_text.potenza_carichi'))|int}}"
          - service: script.turn_on
            data: {}
            entity_id: script.stop_carichi_generale
        until:
          - condition: template
            value_template: "{{ states(states('input_text.potenza_carichi'))|int > states.sensor.potenza_massima_ritardato.state|int }}"
    - service: input_boolean.turn_off
      target: 
        entity_id: input_boolean.sensore_trigger
    mode: single

# Se per TOT minuti il limite di potenza è rispettato, avvia lo script di riattivazione dei carichi fino a che la potenza "phantom" non è zero.
  - id: 'powercontrol_carichi_start'
    alias: PowerControl - Carichi Start
    description: ''
    trigger:
    - platform: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int + states.sensor.potenza_carichi_phantom.state|int < states.sensor.potenza_massima_ritardato.state|int and states.sensor.potenza_carichi_phantom.state|int > 0 }}"
      for:
        minutes: "{{ states.input_number.tempo_start.state|int }}"
    condition:
    - condition: state
      entity_id: input_boolean.attiva_power_control 
      state: 'on'
    - condition: template
      value_template: "{{ states.sensor.potenza_carichi_phantom.state|int > 0 }}"
    action:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Automazione start carichi triggerata: Potenza carichi+phantom ({{ states(states('input_text.potenza_carichi'))|int + states.sensor.potenza_carichi_phantom.state|int}}) < Potenza massima ({{states.sensor.potenza_massima_ritardato.state|int }}) "
    - repeat:
        until:
        - condition: template
          value_template: '{{ states.sensor.potenza_carichi_phantom.state|int > 0 }}'
        sequence:
        - service: system_log.write
          data_template:
            level: debug
            logger: homeassistant.components.pc
            message: "Avvio script start carichi: phantom ({{ states.sensor.potenza_carichi_phantom.state|int }})>0 "
        - service: script.turn_on
          data: {}
          entity_id: script.start_carichi_generale
    mode: single

# Controlla se un carico viene riacceso manualmente, cioè se il relativo interruttore viene attivato dall'utente,
# e resetta la relativa potenza Phantom.
  - id: 'powercontrol_watchdog_phantom'
    alias: PowerControl - Controllo su riattivazione manuale
    description: >-
      Monitora gli switch dei carichi e, se uno di questi è attivo ma la sua potenza
      phantom è diversa da 0, la porta a zero.
    trigger:
      - platform: template
        value_template: >
              {{
              ( states(states('input_text.carico_1_switch')) == 'on' and states.input_number.potenza_1_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_2_switch')) == 'on' and states.input_number.potenza_2_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_3_switch')) == 'on' and states.input_number.potenza_3_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_4_switch')) == 'on' and states.input_number.potenza_4_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_5_switch')) == 'on' and states.input_number.potenza_5_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_6_switch')) == 'on' and states.input_number.potenza_6_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_7_switch')) == 'on' and states.input_number.potenza_7_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_8_switch')) == 'on' and states.input_number.potenza_8_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_9_switch')) == 'on' and states.input_number.potenza_9_phantom.state|int > 0 ) or
              ( states(states('input_text.carico_10_switch')) == 'on' and states.input_number.potenza_10_phantom.state|int > 0 )
              }}
        for:
          seconds: 5
    condition: []
    action:
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: Automazione Check riattivazione manuale - Avvio
      - service: input_number.set_value
        data_template:
          value: 0
          entity_id: "{% if states(states('input_text.carico_1_switch')) == 'on' and states.input_number.potenza_1_phantom.state|int > 0 %}input_number.potenza_1_phantom
          {% elif states(states('input_text.carico_2_switch')) == 'on' and states.input_number.potenza_2_phantom.state|int > 0 %}input_number.potenza_2_phantom
          {% elif states(states('input_text.carico_3_switch')) == 'on' and states.input_number.potenza_3_phantom.state|int > 0 %}input_number.potenza_3_phantom
          {% elif states(states('input_text.carico_4_switch')) == 'on' and states.input_number.potenza_4_phantom.state|int > 0 %}input_number.potenza_4_phantom
          {% elif states(states('input_text.carico_5_switch')) == 'on' and states.input_number.potenza_5_phantom.state|int > 0 %}input_number.potenza_5_phantom
          {% elif states(states('input_text.carico_6_switch')) == 'on' and states.input_number.potenza_6_phantom.state|int > 0 %}input_number.potenza_6_phantom
          {% elif states(states('input_text.carico_7_switch')) == 'on' and states.input_number.potenza_7_phantom.state|int > 0 %}input_number.potenza_7_phantom
          {% elif states(states('input_text.carico_8_switch')) == 'on' and states.input_number.potenza_8_phantom.state|int > 0 %}input_number.potenza_8_phantom
          {% elif states(states('input_text.carico_9_switch')) == 'on' and states.input_number.potenza_9_phantom.state|int > 0 %}input_number.potenza_9_phantom
          {% elif states(states('input_text.carico_10_switch')) == 'on' and states.input_number.potenza_10_phantom.state|int > 0 %}input_number.potenza_10_phantom
          {% else %}none
          {% endif %}"
      - service: system_log.write
        data_template:
          level: debug
          logger: homeassistant.components.pc
          message: Automazione Check riattivazione manuale - Fine
    mode: single
    
    
#################################################################
######################### SCRIPT  ###############################
#################################################################

script:

# I carichi vengono disattivati secondo l'ordine numerico inverso (da minore priorità a maggiore).
# Attende il completamente di uno script prima di passare al successivo.
  stop_carichi_generale:
    alias: PowerControl - Stop carichi generale
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 10"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_10_potenza')}}"
        switch: "{{states('input_text.carico_10_switch')}}"
        phantom: "input_number.potenza_10_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 9"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_9_potenza')}}"
        switch: "{{states('input_text.carico_9_switch')}}"
        phantom: "input_number.potenza_9_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 8"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_8_potenza')}}"
        switch: "{{states('input_text.carico_8_switch')}}"
        phantom: "input_number.potenza_8_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 7"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_7_potenza')}}"
        switch: "{{states('input_text.carico_7_switch')}}"
        phantom: "input_number.potenza_7_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 6"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_6_potenza')}}"
        switch: "{{states('input_text.carico_6_switch')}}"
        phantom: "input_number.potenza_6_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 5"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_5_potenza')}}"
        switch: "{{states('input_text.carico_5_switch')}}"
        phantom: "input_number.potenza_5_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 4"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_4_potenza')}}"
        switch: "{{states('input_text.carico_4_switch')}}"
        phantom: "input_number.potenza_4_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 3"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_3_potenza')}}"
        switch: "{{states('input_text.carico_3_switch')}}"
        phantom: "input_number.potenza_3_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 2"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_2_potenza')}}"
        switch: "{{states('input_text.carico_2_switch')}}"
        phantom: "input_number.potenza_2_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script stop carico 1"
    - service: script.stop_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_1_potenza')}}"
        switch: "{{states('input_text.carico_1_switch')}}"
        phantom: "input_number.potenza_1_phantom"
    mode: single

# I carichi vengono riattivati secondo l'ordine numerico (da maggiore priorità a minore priorità)
# Attende il completamente di uno script prima di passare al successivo.
  start_carichi_generale:
    alias: PowerControl - Start carichi Generale
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 1"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_1_potenza')}}"
        switch: "{{states('input_text.carico_1_switch')}}"
        phantom: "input_number.potenza_1_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 2"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_2_potenza')}}"
        switch: "{{states('input_text.carico_2_switch')}}"
        phantom: "input_number.potenza_2_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 3"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_3_potenza')}}"
        switch: "{{states('input_text.carico_3_switch')}}"
        phantom: "input_number.potenza_3_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 4"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_4_potenza')}}"
        switch: "{{states('input_text.carico_4_switch')}}"
        phantom: "input_number.potenza_4_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 5"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_5_potenza')}}"
        switch: "{{states('input_text.carico_5_switch')}}"
        phantom: "input_number.potenza_5_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 6"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_6_potenza')}}"
        switch: "{{states('input_text.carico_6_switch')}}"
        phantom: "input_number.potenza_6_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 7"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_7_potenza')}}"
        switch: "{{states('input_text.carico_7_switch')}}"
        phantom: "input_number.potenza_7_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 8"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_8_potenza')}}"
        switch: "{{states('input_text.carico_8_switch')}}"
        phantom: "input_number.potenza_8_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 9"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_9_potenza')}}"
        switch: "{{states('input_text.carico_9_switch')}}"
        phantom: "input_number.potenza_9_phantom"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Avvio script start carico 10"
    - service: script.start_carichi_singolo
      data_template: 
        potenza: "{{states('input_text.carico_10_potenza')}}"
        switch: "{{states('input_text.carico_10_switch')}}"
        phantom: "input_number.potenza_10_phantom"
    mode: single

#################################################################
###################### STOP CARICHI #############################
#################################################################

# Avvia il distacco del carico.
# Verifica che il carico si aconfigurato come seonsore di potenza e come interruttore.
# Controlla se la potenza massima è superata, se il carico è acceso (potenza impegnata > 10W).
# Salva la potenza attualmente utilizzata nel relativo valore "phantom".
# Spegne l'interruttore a monte del carico ed invia la notifica. Attende TOT secondi prima di procedere col carico successivo.

  stop_carichi_singolo:
    alias: PowerControl - Stop Carico Singolo
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Avvio"
    - condition: template
      value_template: "{{ potenza != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 1 - Ok"
    - condition: template
      value_template: "{{ switch != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 2 - Ok"
    - condition: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int > states.sensor.potenza_massima_ritardato.state|int}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 3 - Ok {{ states(states('input_text.potenza_carichi'))|int}} > {{states.sensor.potenza_massima_ritardato.state|int}}"
    - condition: template
      value_template: "{{ states(potenza) |int > 10 }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Condition 4 - Ok"
    - service: input_number.set_value
      data_template:
        value: "{{ states(potenza) }}"
        entity_id: "{{phantom}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Spostata potenza da carico {{ states(potenza) }} a phantom {{states(phantom)|int}} (dovrebbero essere uguali)."
    - service_template: switch.turn_off
      data_template:
        entity_id: "{{ switch }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Spento carico"        
    - service: notify.tutti
      data:
        title: Limite potenza superato
        message: "{{ state_attr(switch,'friendly_name') }} disattivato."
        data:
          push:
            thread-id: "powercontrol"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Stop Carico {{ state_attr(switch,'friendly_name') }} - Inviata notifica. Attendo {{ states.input_number.attesa_stop.state }} secondi "
    - delay: 
        seconds: "{{ states.input_number.attesa_stop.state }}"
    mode: queued



#################################################################
###################### START CARICHI ############################
#################################################################

# Script per la riattivazione dei carichi.
# Verifica che il carico si aconfigurato come seonsore di potenza e come interruttore.
# Controlla che il carico sia stato disattivato (potenza in attesa)
# Controlla che il limite di potenza venga rispettato.
# Controlla anche se riattivando il carico (ipotizzando un consumo pari a quello che aveva all'atto della disattivazione) 
# non supera il valore massimo.
# Quest'ultimo controllo serve ad evitare che si riattacchi un carico che poi si ristacchi dopo pochi secondi perché ha 
# causato un nuovo sforamento del limite.
# Imposta il relativo valore "phantom" a zero, riattiva l'interruttore ed invia una notifica di riattivazione.
# Infine attende TOT minuti  prima di passare al carico successivo.

  start_carichi_singolo:
    alias: PowerControl - Start Carico Singolo
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Avvio"
    - condition: template
      value_template: "{{ potenza != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 1 ok"
    - condition: template
      value_template: "{{ switch != 'Seleziona' }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 2 ok"
    - condition: template
      value_template: "{{ states(phantom)|int > 0 }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 3 ok"
    - condition: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int < states.sensor.potenza_massima_ritardato.state|int}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 4 ok"
    - condition: template
      value_template: "{{ states(states('input_text.potenza_carichi'))|int + states(phantom)|int < states.sensor.potenza_massima_ritardato.state|int }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Condition 5 ok"
    - service: input_number.set_value
      data_template:
        value: 0
        entity_id: "{{phantom}}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Resettata potenza phantom"
    - service_template: switch.turn_on
      data_template:
        entity_id: "{{ switch }}"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Attivato interruttore"
    - service: notify.tutti
      data:
        title: Limite potenza rientrato
        message: "{{ state_attr(switch,'friendly_name') }} Riattivato"
        data:
          push:
            thread-id: "powercontrol"
    - service: system_log.write
      data_template:
        level: debug
        logger: homeassistant.components.pc
        message: "Script Start Carico {{ state_attr(switch,'friendly_name') }} - Inviata notifica. Attendo {{ states.input_number.attesa_start.state }} minuti"
    - delay:
        minutes: "{{ states.input_number.attesa_start.state }}"
    mode: queued
